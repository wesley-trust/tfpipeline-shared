steps:

# Check code formatting
- pwsh: |
    
    # Build Variables
    $Random = Get-Random
    $BuildResourceGroupName = "pkrimagebuild$Random"
    $Location = "${{ parameters.location }}"
    $BuildImageType = "${{ parameters.imageType }}"
    
    # Install module
    Install-Module -Name Az -Repository PSGallery -Force
    
    # Clone repo
    git clone https://github.com/actions/runner-images.git

    # Build Image
    Set-Location ./runner-images
    Import-Module ./helpers/GenerateResourcesAndImage.ps1
    GenerateResourcesAndImage -SubscriptionId $env:ARM_SUBSCRIPTION_ID -ResourceGroupName $BuildResourceGroupName -ImageGenerationRepositoryRoot "$pwd" -ImageType $BuildImageType -AzureLocation $Location -AzureClientId $env:ARM_CLIENT_ID -AzureClientSecret $env:ARM_CLIENT_SECRET -AzureTenantId $env:ARM_TENANT_ID -EnableHttpsTrafficOnly $true -tags @{dept="devops";env="prod"}

    # Image Variables
    $Container = "system"
    $ImageResourceGroupName = "${{ parameters.imageResourceGroupName }}"
    $Platform = "${{ parameters.platform }}"
    $ImageNamePrefix = "Image-$Platform"
    $ImageName = "$ImageNamePrefix-$Random"
    $Tags = @{"version"="latest"; "environment"="Prod"; "deployment"="01"; "name_prefix"="$ImageNamePrefix"}

    # Get Build VHD URL
    $AzResource = Get-AzResource -ResourceGroupName $BuildResourceGroupName
    $AzStorageContext = New-AzStorageContext -StorageAccountName $AzResource.name -UseConnectedAccount
    $AzStorageContainer = Get-AzStorageContainer -Container $Container -Context $AzStorageContext
    $AzStorageBlob = Get-AzStorageBlob -Container $AzStorageContainer.name -Context $AzStorageContext | Where-Object {$_.BlobType -eq "PageBlob"}

    # Generate Image Config
    $imageConfig = New-AzImageConfig -Location $Location -HyperVGeneration "V2" -ZoneResilient
    $osDiskVhdUri = $AzStorageBlob.ICloudBlob.uri.AbsoluteUri
    if ($osDiskVhdUri) {Set-AzImageOsDisk -Image $imageConfig -OsType $Platform -OsState "Generalized" -BlobUri $osDiskVhdUri}
    
    # Get existing image
    if ($osDiskVhdUri) {$ImageResourceGroup = Get-AzResourceGroup -Name $ImageResourceGroupName}
    if ($ImageResourceGroup) {$PreviousAzImage = Get-AzImage -ResourceGroupName $ImageResourceGroupName | Where-Object {$_.tags.version -eq "latest"}}
    if ($ImageResourceGroup) {$RemoveAzImage = Get-AzImage -ResourceGroupName $ImageResourceGroupName | Where-Object {$_.tags.version -eq "previous"}}

    # Generate Image
    if (!$ImageResourceGroup) {$ImageResourceGroup = New-AzResourceGroup -Name $ImageResourceGroupName -Location $Location}
    if ($ImageResourceGroup) {$AzImage = New-AzImage -Image $imageConfig -ImageName $ImageName -ResourceGroupName $ImageResourceGroup.ResourceGroupName}
    
    # Update image tags
    if ($AzImage) {New-AzTag -ResourceId $AzImage.Id -Tag $Tags}
    if ($AzImage) { if ($PreviousAzImage) {Update-AzTag -ResourceId $PreviousAzImage.Id -Tag @{"version"="previous"} -Operation "Merge"}}
    
    # Cleanup
    if ($AzImage) {Remove-AzResourceGroup -Name $BuildResourceGroupName -Force}
    if ($RemoveAzImage) {$RemoveAzImage | Remove-AZImage -Force}  

  name: 'CreateRunnerImage'
  displayName: 'Create Runner Image'
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  retryCountOnTaskFailure: 5
  env:
      ARM_TENANT_ID: $(TenantId)
      ARM_CLIENT_ID: $(ServicePrincipalId)
      ARM_CLIENT_SECRET: $(ServicePrincipalKey)
      ARM_SUBSCRIPTION_ID: $(SubscriptionId)